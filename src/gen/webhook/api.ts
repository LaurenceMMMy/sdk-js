/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Webhook
 * Webhook Service.
 *
 * OpenAPI spec version: 1.0.40
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface EndpointIn
 */
export interface EndpointIn {
    /**
     * 
     * @type {string}
     * @memberof EndpointIn
     */
    eventType: string;
    /**
     * 
     * @type {string}
     * @memberof EndpointIn
     */
    url: string;
    /**
     * 
     * @type {boolean}
     * @memberof EndpointIn
     */
    enabled?: boolean;
}
/**
 * 
 * @export
 * @interface EndpointOut
 */
export interface EndpointOut {
    /**
     * 
     * @type {string}
     * @memberof EndpointOut
     */
    eventType: string;
    /**
     * 
     * @type {string}
     * @memberof EndpointOut
     */
    url: string;
    /**
     * 
     * @type {boolean}
     * @memberof EndpointOut
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EndpointOut
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof EndpointOut
     */
    lastActivity?: Date;
    /**
     * 
     * @type {string}
     * @memberof EndpointOut
     */
    errorCode?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LogRecordOut
 */
export interface LogRecordOut {
    /**
     * 
     * @type {number}
     * @memberof LogRecordOut
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof LogRecordOut
     */
    sentAt: Date;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    requestBody?: string;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    requestHeaders?: string;
    /**
     * 
     * @type {number}
     * @memberof LogRecordOut
     */
    requestTryNo: number;
    /**
     * 
     * @type {number}
     * @memberof LogRecordOut
     */
    responseStatus: number;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    responseHeaders?: string;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    responseBody?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LogRecordOut
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    errorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LogRecordOut
     */
    errorDescription?: string;
}
/**
 * 
 * @export
 * @interface UserWebhookOut
 */
export interface UserWebhookOut {
    /**
     * 
     * @type {string}
     * @memberof UserWebhookOut
     */
    applicationId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWebhookOut
     */
    developerId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWebhookOut
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWebhookOut
     */
    webhookId: string;
    /**
     * 
     * @type {string}
     * @memberof UserWebhookOut
     */
    tag?: string;
    /**
     * 
     * @type {Array<EndpointOut>}
     * @memberof UserWebhookOut
     */
    endpoints: Array<EndpointOut>;
    /**
     * 
     * @type {LogRecordOut}
     * @memberof UserWebhookOut
     */
    lastRequest?: LogRecordOut;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface WebhookIn
 */
export interface WebhookIn {
    /**
     * 
     * @type {string}
     * @memberof WebhookIn
     */
    tag?: string;
    /**
     * 
     * @type {Array<EndpointIn>}
     * @memberof WebhookIn
     */
    endpoints: Array<EndpointIn>;
}
/**
 * 
 * @export
 * @interface WebhookOut
 */
export interface WebhookOut {
    /**
     * 
     * @type {string}
     * @memberof WebhookOut
     */
    applicationId?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookOut
     */
    developerId?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookOut
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookOut
     */
    webhookId: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookOut
     */
    tag?: string;
    /**
     * 
     * @type {Array<EndpointOut>}
     * @memberof WebhookOut
     */
    endpoints: Array<EndpointOut>;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add user personal webhook
         * @param {WebhookIn} body 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserInternalWebhook(body: WebhookIn, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addUserInternalWebhook.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addUserInternalWebhook.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WebhookIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhookEndpoint(body: EndpointIn, webhookId: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addWebhookEndpoint.');
            }
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling addWebhookEndpoint.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addWebhookEndpoint.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}/endpoints/`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EndpointIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} userId 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInternalWebhooks(userId: string, webhookId: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserInternalWebhooks.');
            }
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling deleteUserInternalWebhooks.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling deleteWebhookEndpointById.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling deleteWebhookEndpointById.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteWebhookEndpointById.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}/endpoints/{endpoint_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook details
         * @param {string} userId 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInternalWebhookDetails(userId: string, webhookId: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserInternalWebhookDetails.');
            }
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling getUserInternalWebhookDetails.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling getWebhookEndpointById.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling getWebhookEndpointById.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getWebhookEndpointById.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}/endpoints/{endpoint_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint list
         * @param {string} webhookId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoints(webhookId: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling getWebhookEndpoints.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getWebhookEndpoints.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}/endpoints/`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateWebhookEndpointById.');
            }
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling updateWebhookEndpointById.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling updateWebhookEndpointById.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateWebhookEndpointById.');
            }
            const localVarPath = `/internal-api/v1/user/{user_id}/webhooks/{webhook_id}/endpoints/{endpoint_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EndpointIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add user personal webhook
         * @param {WebhookIn} body 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserInternalWebhook(body: WebhookIn, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserWebhookOut> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addUserInternalWebhook(body, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhookEndpoint(body: EndpointIn, webhookId: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EndpointOut>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addWebhookEndpoint(body, webhookId, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} userId 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInternalWebhooks(userId: string, webhookId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteUserInternalWebhooks(userId, webhookId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteWebhookEndpointById(webhookId, endpointId, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook details
         * @param {string} userId 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInternalWebhookDetails(userId: string, webhookId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserWebhookOut> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getUserInternalWebhookDetails(userId, webhookId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EndpointOut> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getWebhookEndpointById(webhookId, endpointId, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint list
         * @param {string} webhookId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoints(webhookId: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EndpointOut>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getWebhookEndpoints(webhookId, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EndpointOut> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updateWebhookEndpointById(body, webhookId, endpointId, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add user personal webhook
         * @param {WebhookIn} body 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserInternalWebhook(body: WebhookIn, userId: string, options?: any) {
            return DefaultApiFp(configuration).addUserInternalWebhook(body, userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhookEndpoint(body: EndpointIn, webhookId: string, userId: string, options?: any) {
            return DefaultApiFp(configuration).addWebhookEndpoint(body, webhookId, userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} userId 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInternalWebhooks(userId: string, webhookId: string, options?: any) {
            return DefaultApiFp(configuration).deleteUserInternalWebhooks(userId, webhookId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options?: any) {
            return DefaultApiFp(configuration).deleteWebhookEndpointById(webhookId, endpointId, userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook details
         * @param {string} userId 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInternalWebhookDetails(userId: string, webhookId: string, options?: any) {
            return DefaultApiFp(configuration).getUserInternalWebhookDetails(userId, webhookId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options?: any) {
            return DefaultApiFp(configuration).getWebhookEndpointById(webhookId, endpointId, userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint list
         * @param {string} webhookId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoints(webhookId: string, userId: string, options?: any) {
            return DefaultApiFp(configuration).getWebhookEndpoints(webhookId, userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, userId: string, options?: any) {
            return DefaultApiFp(configuration).updateWebhookEndpointById(body, webhookId, endpointId, userId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add user personal webhook
     * @param {WebhookIn} body 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUserInternalWebhook(body: WebhookIn, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).addUserInternalWebhook(body, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint details
     * @param {EndpointIn} body 
     * @param {string} webhookId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addWebhookEndpoint(body: EndpointIn, webhookId: string, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).addWebhookEndpoint(body, webhookId, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove user personal webhook by id
     * @param {string} userId 
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserInternalWebhooks(userId: string, webhookId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteUserInternalWebhooks(userId, webhookId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint details
     * @param {string} webhookId 
     * @param {number} endpointId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWebhookEndpointById(webhookId, endpointId, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook details
     * @param {string} userId 
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserInternalWebhookDetails(userId: string, webhookId: string, options?: any) {
        return DefaultApiFp(this.configuration).getUserInternalWebhookDetails(userId, webhookId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint details
     * @param {string} webhookId 
     * @param {number} endpointId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWebhookEndpointById(webhookId: string, endpointId: number, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).getWebhookEndpointById(webhookId, endpointId, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint list
     * @param {string} webhookId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWebhookEndpoints(webhookId: string, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).getWebhookEndpoints(webhookId, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update webhook endpoint details
     * @param {EndpointIn} body 
     * @param {string} webhookId 
     * @param {number} endpointId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).updateWebhookEndpointById(body, webhookId, endpointId, userId, options)(this.fetch, this.basePath);
    }

}
/**
 * DeveloperApi - fetch parameter creator
 * @export
 */
export const DeveloperApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get webhook http request log
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs(applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling getLogs.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/log`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Key may be used to validate webhook signature
         * @summary Get public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignaturePublicKey(options: any = {}): FetchArgs {
            const localVarPath = `/public/.well-known/public.key`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint can be safely called many times. If configuration does not exist it will be created. If does exist, updated.
         * @summary Create webhook configuration for application
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookCreate(body: WebhookIn, applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webhookCreate.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling webhookCreate.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/webhooks`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WebhookIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Also removes user-specific webhooks associated with the application_id
         * @summary Remove webhook configuration for application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookDelete(applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling webhookDelete.');
            }
            const localVarPath = `/api/v1/applications/{application_id}`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get application webhook configuration
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGet(applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling webhookGet.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/webhooks`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update webhook configuration for application
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdate(body: WebhookIn, applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webhookUpdate.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling webhookUpdate.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/webhooks`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WebhookIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeveloperApi - functional programming interface
 * @export
 */
export const DeveloperApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get webhook http request log
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs(applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LogRecordOut>> {
            const localVarFetchArgs = DeveloperApiFetchParamCreator(configuration).getLogs(applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Key may be used to validate webhook signature
         * @summary Get public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignaturePublicKey(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = DeveloperApiFetchParamCreator(configuration).getSignaturePublicKey(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Endpoint can be safely called many times. If configuration does not exist it will be created. If does exist, updated.
         * @summary Create webhook configuration for application
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookCreate(body: WebhookIn, applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = DeveloperApiFetchParamCreator(configuration).webhookCreate(body, applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Also removes user-specific webhooks associated with the application_id
         * @summary Remove webhook configuration for application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookDelete(applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = DeveloperApiFetchParamCreator(configuration).webhookDelete(applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get application webhook configuration
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGet(applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WebhookOut> {
            const localVarFetchArgs = DeveloperApiFetchParamCreator(configuration).webhookGet(applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update webhook configuration for application
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdate(body: WebhookIn, applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = DeveloperApiFetchParamCreator(configuration).webhookUpdate(body, applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DeveloperApi - factory interface
 * @export
 */
export const DeveloperApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get webhook http request log
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs(applicationId: string, options?: any) {
            return DeveloperApiFp(configuration).getLogs(applicationId, options)(fetch, basePath);
        },
        /**
         * Key may be used to validate webhook signature
         * @summary Get public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignaturePublicKey(options?: any) {
            return DeveloperApiFp(configuration).getSignaturePublicKey(options)(fetch, basePath);
        },
        /**
         * Endpoint can be safely called many times. If configuration does not exist it will be created. If does exist, updated.
         * @summary Create webhook configuration for application
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookCreate(body: WebhookIn, applicationId: string, options?: any) {
            return DeveloperApiFp(configuration).webhookCreate(body, applicationId, options)(fetch, basePath);
        },
        /**
         * Also removes user-specific webhooks associated with the application_id
         * @summary Remove webhook configuration for application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookDelete(applicationId: string, options?: any) {
            return DeveloperApiFp(configuration).webhookDelete(applicationId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get application webhook configuration
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookGet(applicationId: string, options?: any) {
            return DeveloperApiFp(configuration).webhookGet(applicationId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update webhook configuration for application
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdate(body: WebhookIn, applicationId: string, options?: any) {
            return DeveloperApiFp(configuration).webhookUpdate(body, applicationId, options)(fetch, basePath);
        },
    };
};

/**
 * DeveloperApi - object-oriented interface
 * @export
 * @class DeveloperApi
 * @extends {BaseAPI}
 */
export class DeveloperApi extends BaseAPI {
    /**
     * 
     * @summary Get webhook http request log
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperApi
     */
    public getLogs(applicationId: string, options?: any) {
        return DeveloperApiFp(this.configuration).getLogs(applicationId, options)(this.fetch, this.basePath);
    }

    /**
     * Key may be used to validate webhook signature
     * @summary Get public key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperApi
     */
    public getSignaturePublicKey(options?: any) {
        return DeveloperApiFp(this.configuration).getSignaturePublicKey(options)(this.fetch, this.basePath);
    }

    /**
     * Endpoint can be safely called many times. If configuration does not exist it will be created. If does exist, updated.
     * @summary Create webhook configuration for application
     * @param {WebhookIn} body 
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperApi
     */
    public webhookCreate(body: WebhookIn, applicationId: string, options?: any) {
        return DeveloperApiFp(this.configuration).webhookCreate(body, applicationId, options)(this.fetch, this.basePath);
    }

    /**
     * Also removes user-specific webhooks associated with the application_id
     * @summary Remove webhook configuration for application
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperApi
     */
    public webhookDelete(applicationId: string, options?: any) {
        return DeveloperApiFp(this.configuration).webhookDelete(applicationId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get application webhook configuration
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperApi
     */
    public webhookGet(applicationId: string, options?: any) {
        return DeveloperApiFp(this.configuration).webhookGet(applicationId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update webhook configuration for application
     * @param {WebhookIn} body 
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperApi
     */
    public webhookUpdate(body: WebhookIn, applicationId: string, options?: any) {
        return DeveloperApiFp(this.configuration).webhookUpdate(body, applicationId, options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register user-specific webhooks
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserSpecificWebhooks(body: WebhookIn, applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addUserSpecificWebhooks.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling addUserSpecificWebhooks.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/user/webhooks`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WebhookIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add user personal webhook
         * @param {WebhookIn} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserWebhook(body: WebhookIn, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addUserWebhook.');
            }
            const localVarPath = `/api/v1/user/webhooks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WebhookIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhookEndpoint(body: EndpointIn, webhookId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addWebhookEndpoint.');
            }
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling addWebhookEndpoint.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}/endpoints/`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EndpointIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove all user personal webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUserWebhooks(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/user/webhooks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUserWebhooksByTag(tag: string, options: any = {}): FetchArgs {
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag','Required parameter tag was null or undefined when calling deleteAllUserWebhooksByTag.');
            }
            const localVarPath = `/api/v1/user/webhooks/tag/{tag}`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWebhooks(webhookId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling deleteUserWebhooks.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpointById(webhookId: string, endpointId: number, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling deleteWebhookEndpointById.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling deleteWebhookEndpointById.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}/endpoints/{endpoint_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook details
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhookDetails(webhookId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling getUserWebhookDetails.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of user personal webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhooksPublic(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/user/webhooks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user webhooks by tag
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhooksPublicByTag(tag: string, options: any = {}): FetchArgs {
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag','Required parameter tag was null or undefined when calling getUserWebhooksPublicByTag.');
            }
            const localVarPath = `/api/v1/user/webhooks/tag/{tag}`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpointById(webhookId: string, endpointId: number, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling getWebhookEndpointById.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling getWebhookEndpointById.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}/endpoints/{endpoint_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get webhook endpoint list
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoints(webhookId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling getWebhookEndpoints.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}/endpoints/`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateWebhookEndpointById.');
            }
            // verify required parameter 'webhookId' is not null or undefined
            if (webhookId === null || webhookId === undefined) {
                throw new RequiredError('webhookId','Required parameter webhookId was null or undefined when calling updateWebhookEndpointById.');
            }
            // verify required parameter 'endpointId' is not null or undefined
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError('endpointId','Required parameter endpointId was null or undefined when calling updateWebhookEndpointById.');
            }
            const localVarPath = `/api/v1/user/webhooks/{webhook_id}/endpoints/{endpoint_id}`
                .replace(`{${"webhook_id"}}`, encodeURIComponent(String(webhookId)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EndpointIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhooks must be preconfigured using POST /applications/{application_id}/webhooks
         * @summary Subscribe current user to application's webhooks
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe(applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling subscribe.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/subscribe`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unsubscribe current user from application's webhooks
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe(applicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling unsubscribe.');
            }
            const localVarPath = `/api/v1/applications/{application_id}/unsubscribe`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register user-specific webhooks
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserSpecificWebhooks(body: WebhookIn, applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).addUserSpecificWebhooks(body, applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add user personal webhook
         * @param {WebhookIn} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserWebhook(body: WebhookIn, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserWebhookOut> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).addUserWebhook(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhookEndpoint(body: EndpointIn, webhookId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EndpointOut>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).addWebhookEndpoint(body, webhookId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove all user personal webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUserWebhooks(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteAllUserWebhooks(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUserWebhooksByTag(tag: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteAllUserWebhooksByTag(tag, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWebhooks(webhookId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteUserWebhooks(webhookId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpointById(webhookId: string, endpointId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteWebhookEndpointById(webhookId, endpointId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook details
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhookDetails(webhookId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserWebhookOut> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserWebhookDetails(webhookId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get list of user personal webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhooksPublic(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserWebhookOut>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserWebhooksPublic(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get user webhooks by tag
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhooksPublicByTag(tag: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserWebhookOut>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserWebhooksPublicByTag(tag, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpointById(webhookId: string, endpointId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EndpointOut> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getWebhookEndpointById(webhookId, endpointId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get webhook endpoint list
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoints(webhookId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<EndpointOut>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getWebhookEndpoints(webhookId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EndpointOut> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateWebhookEndpointById(body, webhookId, endpointId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Webhooks must be preconfigured using POST /applications/{application_id}/webhooks
         * @summary Subscribe current user to application's webhooks
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe(applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).subscribe(applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unsubscribe current user from application's webhooks
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe(applicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).unsubscribe(applicationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Register user-specific webhooks
         * @param {WebhookIn} body 
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserSpecificWebhooks(body: WebhookIn, applicationId: string, options?: any) {
            return UserApiFp(configuration).addUserSpecificWebhooks(body, applicationId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add user personal webhook
         * @param {WebhookIn} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserWebhook(body: WebhookIn, options?: any) {
            return UserApiFp(configuration).addUserWebhook(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhookEndpoint(body: EndpointIn, webhookId: string, options?: any) {
            return UserApiFp(configuration).addWebhookEndpoint(body, webhookId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove all user personal webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUserWebhooks(options?: any) {
            return UserApiFp(configuration).deleteAllUserWebhooks(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUserWebhooksByTag(tag: string, options?: any) {
            return UserApiFp(configuration).deleteAllUserWebhooksByTag(tag, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove user personal webhook by id
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserWebhooks(webhookId: string, options?: any) {
            return UserApiFp(configuration).deleteUserWebhooks(webhookId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpointById(webhookId: string, endpointId: number, options?: any) {
            return UserApiFp(configuration).deleteWebhookEndpointById(webhookId, endpointId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook details
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhookDetails(webhookId: string, options?: any) {
            return UserApiFp(configuration).getUserWebhookDetails(webhookId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get list of user personal webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhooksPublic(options?: any) {
            return UserApiFp(configuration).getUserWebhooksPublic(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user webhooks by tag
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhooksPublicByTag(tag: string, options?: any) {
            return UserApiFp(configuration).getUserWebhooksPublicByTag(tag, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint details
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpointById(webhookId: string, endpointId: number, options?: any) {
            return UserApiFp(configuration).getWebhookEndpointById(webhookId, endpointId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get webhook endpoint list
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoints(webhookId: string, options?: any) {
            return UserApiFp(configuration).getWebhookEndpoints(webhookId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update webhook endpoint details
         * @param {EndpointIn} body 
         * @param {string} webhookId 
         * @param {number} endpointId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, options?: any) {
            return UserApiFp(configuration).updateWebhookEndpointById(body, webhookId, endpointId, options)(fetch, basePath);
        },
        /**
         * Webhooks must be preconfigured using POST /applications/{application_id}/webhooks
         * @summary Subscribe current user to application's webhooks
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe(applicationId: string, options?: any) {
            return UserApiFp(configuration).subscribe(applicationId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unsubscribe current user from application's webhooks
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe(applicationId: string, options?: any) {
            return UserApiFp(configuration).unsubscribe(applicationId, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Register user-specific webhooks
     * @param {WebhookIn} body 
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addUserSpecificWebhooks(body: WebhookIn, applicationId: string, options?: any) {
        return UserApiFp(this.configuration).addUserSpecificWebhooks(body, applicationId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add user personal webhook
     * @param {WebhookIn} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addUserWebhook(body: WebhookIn, options?: any) {
        return UserApiFp(this.configuration).addUserWebhook(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint details
     * @param {EndpointIn} body 
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addWebhookEndpoint(body: EndpointIn, webhookId: string, options?: any) {
        return UserApiFp(this.configuration).addWebhookEndpoint(body, webhookId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove all user personal webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteAllUserWebhooks(options?: any) {
        return UserApiFp(this.configuration).deleteAllUserWebhooks(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove user personal webhook by id
     * @param {string} tag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteAllUserWebhooksByTag(tag: string, options?: any) {
        return UserApiFp(this.configuration).deleteAllUserWebhooksByTag(tag, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove user personal webhook by id
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserWebhooks(webhookId: string, options?: any) {
        return UserApiFp(this.configuration).deleteUserWebhooks(webhookId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint details
     * @param {string} webhookId 
     * @param {number} endpointId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteWebhookEndpointById(webhookId: string, endpointId: number, options?: any) {
        return UserApiFp(this.configuration).deleteWebhookEndpointById(webhookId, endpointId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook details
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserWebhookDetails(webhookId: string, options?: any) {
        return UserApiFp(this.configuration).getUserWebhookDetails(webhookId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get list of user personal webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserWebhooksPublic(options?: any) {
        return UserApiFp(this.configuration).getUserWebhooksPublic(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get user webhooks by tag
     * @param {string} tag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserWebhooksPublicByTag(tag: string, options?: any) {
        return UserApiFp(this.configuration).getUserWebhooksPublicByTag(tag, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint details
     * @param {string} webhookId 
     * @param {number} endpointId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getWebhookEndpointById(webhookId: string, endpointId: number, options?: any) {
        return UserApiFp(this.configuration).getWebhookEndpointById(webhookId, endpointId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get webhook endpoint list
     * @param {string} webhookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getWebhookEndpoints(webhookId: string, options?: any) {
        return UserApiFp(this.configuration).getWebhookEndpoints(webhookId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update webhook endpoint details
     * @param {EndpointIn} body 
     * @param {string} webhookId 
     * @param {number} endpointId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateWebhookEndpointById(body: EndpointIn, webhookId: string, endpointId: number, options?: any) {
        return UserApiFp(this.configuration).updateWebhookEndpointById(body, webhookId, endpointId, options)(this.fetch, this.basePath);
    }

    /**
     * Webhooks must be preconfigured using POST /applications/{application_id}/webhooks
     * @summary Subscribe current user to application's webhooks
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public subscribe(applicationId: string, options?: any) {
        return UserApiFp(this.configuration).subscribe(applicationId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unsubscribe current user from application's webhooks
     * @param {string} applicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public unsubscribe(applicationId: string, options?: any) {
        return UserApiFp(this.configuration).unsubscribe(applicationId, options)(this.fetch, this.basePath);
    }

}
